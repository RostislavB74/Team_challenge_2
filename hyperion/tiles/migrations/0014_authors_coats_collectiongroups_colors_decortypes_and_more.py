# Generated by Django 4.2 on 2025-06-30 18:08

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('tiles', '0013_collectiongroup_collections'),
    ]

    operations = [
        migrations.CreateModel(
            name='Authors',
            fields=[
                ('id', models.SmallIntegerField(db_column='user_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='user_name', max_length=255)),
            ],
            options={
                'db_table': 'c_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Coats',
            fields=[
                ('id', models.SmallIntegerField(db_column='coat_type_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='coat_type', max_length=255)),
            ],
            options={
                'db_table': 'cu_coat_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CollectionGroups',
            fields=[
                ('id', models.SmallIntegerField(db_column='collection_group_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='collection_group', max_length=255)),
                ('description', models.CharField(blank=True, db_column='descr', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Група колекції',
                'verbose_name_plural': 'Групи колекцій',
                'db_table': 'c_collection_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Colors',
            fields=[
                ('id', models.SmallIntegerField(db_column='color_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='color', max_length=255)),
            ],
            options={
                'db_table': 'c_color',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DecorTypes',
            fields=[
                ('id', models.SmallIntegerField(db_column='decor_type_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='decor_type', max_length=255)),
            ],
            options={
                'db_table': 'cu_decor_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Designs',
            fields=[
                ('design_ean', models.CharField(db_column='design_ean', max_length=50, primary_key=True, serialize=False)),
                ('design_name', models.CharField(blank=True, db_column='design_name', max_length=255, null=True)),
                ('is_test', models.BooleanField(db_column='is_test', default=False)),
                ('tone', models.CharField(blank=True, db_column='tone', max_length=50, null=True)),
                ('quality', models.CharField(blank=True, db_column='quality', max_length=50, null=True)),
                ('height', models.SmallIntegerField(blank=True, db_column='height', null=True)),
                ('width', models.SmallIntegerField(blank=True, db_column='width', null=True)),
                ('thickness', models.DecimalField(blank=True, db_column='thickness', decimal_places=2, max_digits=10, null=True)),
                ('box_amount', models.SmallIntegerField(blank=True, db_column='box_amount', null=True)),
                ('package_amount', models.SmallIntegerField(blank=True, db_column='package_amount', null=True)),
                ('box_weight', models.DecimalField(blank=True, db_column='box_weight', decimal_places=2, max_digits=10, null=True)),
                ('photo', models.BinaryField(blank=True, db_column='photo', max_length='max', null=True)),
                ('tolerance', models.DecimalField(blank=True, db_column='tolerance', decimal_places=2, max_digits=10, null=True)),
                ('package_square', models.DecimalField(blank=True, db_column='package_square', decimal_places=2, max_digits=10, null=True)),
                ('is_base', models.BooleanField(db_column='is_base', default=False)),
                ('tile_1c_id', models.IntegerField(blank=True, db_column='tile_1c_id', null=True)),
                ('parent_ean', models.CharField(blank=True, db_column='parent_ean', max_length=50, null=True)),
                ('print_name', models.CharField(blank=True, db_column='print_name', max_length=255, null=True)),
                ('add_date', models.DateTimeField(blank=True, db_column='add_date', null=True)),
                ('ean', models.CharField(blank=True, db_column='ean', max_length=50, null=True)),
                ('design_code', models.IntegerField(db_column='design_code')),
                ('archived', models.BooleanField(db_column='archived', default=False)),
                ('is_action', models.BooleanField(db_column='is_action', default=False)),
                ('caliber', models.SmallIntegerField(db_column='caliber')),
                ('modifier', models.CharField(blank=True, db_column='modifier', max_length=255, null=True)),
                ('is_stock', models.BooleanField(db_column='is_stock', default=False)),
                ('use_second_color', models.BooleanField(db_column='use_second_color', default=False)),
                ('decor_base_ean', models.CharField(blank=True, db_column='decor_base_ean', max_length=50, null=True)),
                ('set_amount', models.SmallIntegerField(blank=True, db_column='set_amount', null=True)),
                ('amount_in_row', models.SmallIntegerField(blank=True, db_column='amount_in_row', null=True)),
                ('amount_in_column', models.SmallIntegerField(blank=True, db_column='amount_in_column', null=True)),
                ('additional_name', models.CharField(blank=True, db_column='additional_name', max_length=255, null=True)),
                ('laying_type', models.CharField(blank=True, db_column='laying_type', max_length=50, null=True)),
                ('laying', models.CharField(blank=True, db_column='laying', max_length=255, null=True)),
                ('serial_number_in_set', models.SmallIntegerField(blank=True, db_column='serial_number_in_set', null=True)),
                ('amount_panno_in_box', models.SmallIntegerField(blank=True, db_column='amount_panno_in_box', null=True)),
                ('caliber2', models.SmallIntegerField(db_column='caliber2')),
                ('on_tile_ean', models.CharField(blank=True, db_column='on_tile_ean', max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Дизайн',
                'verbose_name_plural': 'Дизайни',
                'db_table': 'c_design',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Hues',
            fields=[
                ('id', models.SmallIntegerField(db_column='hue_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='hue', max_length=255)),
            ],
            options={
                'db_table': 'c_hue',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProductGroups',
            fields=[
                ('id', models.SmallIntegerField(db_column='product_group_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='product_group', max_length=255)),
                ('in_order', models.SmallIntegerField(db_column='in_order')),
                ('is_base', models.BooleanField(db_column='is_base', default=False)),
            ],
            options={
                'verbose_name': 'Група продукту',
                'verbose_name_plural': 'Групи продуктів',
                'db_table': 'c_product_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProductTypes',
            fields=[
                ('product_type_id', models.SmallIntegerField(db_column='product_type_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='product_type', max_length=255)),
                ('short_name', models.CharField(blank=True, db_column='short_name', max_length=255, null=True)),
                ('export_name', models.CharField(blank=True, db_column='export_name', max_length=255, null=True)),
                ('label_name', models.CharField(blank=True, db_column='label_name', max_length=255, null=True)),
                ('use_claiber', models.BooleanField(db_column='use_caliber', default=False)),
            ],
            options={
                'verbose_name': 'Тип продукту',
                'verbose_name_plural': 'Типи продуктів',
                'db_table': 'c_product_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Suffix_For_ProductTypes',
            fields=[
                ('id', models.AutoField(db_column='suffix_for_product_type_id', primary_key=True, serialize=False)),
                ('suffix', models.CharField(db_column='suffix', max_length=255)),
            ],
            options={
                'verbose_name': 'Суфікс для типу продукту',
                'verbose_name_plural': 'Суфікси для типу продукту',
                'db_table': 'c_suffix_for_product_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TileGlazes',
            fields=[
                ('id', models.SmallIntegerField(db_column='tile_glaze_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='tile_glaze', max_length=255)),
            ],
            options={
                'db_table': 'c_tile_glaze',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TilePassportGroups',
            fields=[
                ('id', models.SmallIntegerField(db_column='tile_passport_group_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='tile_passport_group', max_length=255)),
            ],
            options={
                'verbose_name': 'Група плитки для паспорту',
                'verbose_name_plural': 'Групи плиток для паспортів',
                'db_table': 'c_tile_passport_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tilestandarts',
            fields=[
                ('id', models.SmallIntegerField(db_column='tile_standart_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='standart', max_length=255)),
                ('description', models.CharField(blank=True, db_column='descr', max_length=255, null=True)),
                ('full_name', models.CharField(blank=True, db_column='full_name', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Стандарт плитки',
                'verbose_name_plural': 'Стандарти плиток',
                'db_table': 'cu_tile_standart',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TileTypes',
            fields=[
                ('id', models.SmallIntegerField(db_column='tile_type_id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='tile_type', max_length=255)),
                ('height', models.SmallIntegerField(blank=True, db_column='height', null=True)),
                ('width', models.SmallIntegerField(blank=True, db_column='width', null=True)),
                ('thickness', models.DecimalField(blank=True, db_column='thickness', decimal_places=2, max_digits=10, null=True)),
                ('box_amount', models.SmallIntegerField(blank=True, db_column='box_amount', null=True)),
                ('package_amount', models.SmallIntegerField(blank=True, db_column='package_amount', null=True)),
                ('box_weight', models.DecimalField(blank=True, db_column='box_weight', decimal_places=2, max_digits=10, null=True)),
                ('tolerance', models.DecimalField(db_column='tolerance', decimal_places=2, max_digits=10, null=True)),
                ('package_square', models.DecimalField(db_column='package_square', decimal_places=2, max_digits=10, null=True)),
                ('use_modifier', models.BooleanField(db_column='use_modifier', default=False)),
                ('combi_design', models.CharField(db_column='combi_design', max_length=13, null=True)),
                ('tech_design', models.CharField(db_column='tech_design', max_length=13, null=True)),
                ('square_weight', models.DecimalField(db_column='square_weight', decimal_places=2, max_digits=10, null=True)),
            ],
            options={
                'verbose_name': 'Тип плитки',
                'verbose_name_plural': 'Типи плиток',
                'db_table': 'c_tile_type',
                'managed': False,
            },
        ),
        migrations.DeleteModel(
            name='Author',
        ),
        migrations.DeleteModel(
            name='Coat',
        ),
        migrations.DeleteModel(
            name='Collection',
        ),
        migrations.DeleteModel(
            name='CollectionGroup',
        ),
        migrations.DeleteModel(
            name='Color',
        ),
        migrations.DeleteModel(
            name='DecorType',
        ),
        migrations.DeleteModel(
            name='Design',
        ),
        migrations.DeleteModel(
            name='Hue',
        ),
        migrations.DeleteModel(
            name='ProductGroup',
        ),
        migrations.DeleteModel(
            name='ProductType',
        ),
        migrations.DeleteModel(
            name='Suffix_For_ProductType',
        ),
        migrations.DeleteModel(
            name='TileGlaze',
        ),
        migrations.DeleteModel(
            name='TilePassportGroup',
        ),
        migrations.DeleteModel(
            name='Tilestandart',
        ),
        migrations.DeleteModel(
            name='TileType',
        ),
        migrations.AlterModelOptions(
            name='collections',
            options={'managed': False},
        ),
    ]
